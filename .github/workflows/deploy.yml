name: Deploy to Local Server

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Angular dependencies
        run: |
          cd client
          npm ci

      - name: Build Angular app
        run: |
          cd client
          npm run build --configuration=production

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Publish .NET API
        run: |
          cd server/API_Identity
          dotnet publish -c Release -o ./publish

      - name: Archive build artifacts
        run: |
          mkdir -p artifact
          cp -r client/dist server/API_Identity/publish docker-compose.yml nginx/nginx.conf artifact/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-artifacts
          path: artifact

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app-artifacts
          path: ~/app

      - name: Ensure target directory exists
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            rm -rf ~/app/*
            mkdir -p ~/app

      - name: Deploy to Local Server using SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{secrets.SSH_PORT }}
          source: "artifact/*"
          target: "~/app"

      - name: Restart Docker Containers
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p ~/app
            cd ~/app
            docker compose down
            docker compose up -d --build
            docker system prune -af
