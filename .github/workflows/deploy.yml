name: Deploy to Local Server

on:
  workflow_dispatch: 
  push:
    branches:
      - main

jobs:

  build:
    environment: Production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Perform variable substitution
        uses: microsoft/variable-substitution@v1
        with:
          files: './server/API_Identity/API_Identity/appsettings.json'
        env:
          ConnectionStrings.DatabaseConnection: ${{ secrets.CONNECTIONSTRING }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Save static files
        run: |
          cp ./client/nginx.conf ./nginx-client.conf
          cp ./client/Dockerfile ./Dockerfile-client
          cp ./nginx/nginx.conf ./nginx.conf
          cp ./server/API_Identity/Dockerfile ./Dockerfile-server

      - name: Install Angular dependencies
        run: |
          cd client
          npm ci

      - name: Build Angular app
        run: |
          cd client
          npm run build --configuration=production
          cp -R ./dist ../dist
          rm -rf ../client

      # - name: Setup .NET dependencies
      #   run: |
      #     apt update && apt install curl -y && apt install libicu-dev -y

      - name: Set up .NET
        uses: actions/setup-dotnet@v4.3.0
        with:
          dotnet-version: 9.x

      - name: Publish .NET API
        run: |
          cd server/API_Identity
          dotnet publish -c Release -o ../../server-files
          rm -rf ../../server

      - name: Archive build artifacts
        run: |
          mkdir -p artifact/client artifact/server
          cp -r ./dist artifact/client
          cp ./Dockerfile-client artifact/client/Dockerfile
          cp ./nginx-client.conf artifact/client/nginx.conf
          cp -r ./server-files artifact/server
          cp ./Dockerfile-server artifact/server/Dockerfile
          cp ./nginx.conf artifact/nginx.conf
          cp ./docker-compose.yml artifact/docker-compose.yml

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-artifacts
          path: artifact

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app-artifacts
          path: ./artifact

      - name: Verify downloaded files
        run: ls -R ./artifact

      - name: Create a tarball of the artifacts
        run: tar -czf app-artifacts.tar.gz -C artifact .

      - name: Ensure deploy directory
        uses: and-fm/cloudflared-ssh-action@v3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          private_key_filename: ${{ secrets.SSH_PRIVATE_KEY_FILENAME }}
          private_key_value: ${{ secrets.SSH_PRIVATE_KEY_VALUE }}
          port: ${{ secrets.SSH_PORT }}
          service_token_id: ${{ secrets.SERVICE_TOKEN_ID }}
          service_token_secret: ${{ secrets.SERVICE_TOKEN_SECRET }}
          commands: |
            mkdir -p ~/app

      - name: Transfer file
        uses: zgunz42/cloudflared-scp-action
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          private_key: ${{ secrets.SSH_PRIVATE_KEY_VALUE }}
          port: ${{ secrets.SSH_PORT }}
          from: ./app-artifacts.tar.gz
          to: ~/app
          service_token_id: ${{ secrets.SERVICE_TOKEN_ID }}
          service_token_secret: ${{ secrets.SERVICE_TOKEN_SECRET }}

      - name: Decode and Extract on Server
        uses: and-fm/cloudflared-ssh-action@v3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          private_key_filename: ${{ secrets.SSH_PRIVATE_KEY_FILENAME }}
          private_key_value: ${{ secrets.SSH_PRIVATE_KEY_VALUE }}
          port: ${{ secrets.SSH_PORT }}
          service_token_id: ${{ secrets.SERVICE_TOKEN_ID }}
          service_token_secret: ${{ secrets.SERVICE_TOKEN_SECRET }}
          commands: |
            cd ~/app
            tar -xzf app-artifacts.tar.gz
            docker compose down
            docker compose up -d --build
            docker system prune -af


